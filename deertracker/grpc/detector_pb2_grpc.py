# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from deertracker.grpc import detector_pb2 as deertracker_dot_grpc_dot_detector__pb2
from deertracker import logger

LOGGER = logger.get_logger()


class DetectorStub(object):
    """Detector service takes image bytes and returns prediction of classes of objects detected"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.predict = channel.unary_unary(
            "/Detector/predict",
            request_serializer=deertracker_dot_grpc_dot_detector__pb2.Image.SerializeToString,
            response_deserializer=deertracker_dot_grpc_dot_detector__pb2.Prediction.FromString,
        )


class DetectorServicer(object):
    """Detector service takes image bytes and returns prediction of classes of objects detected"""

    def __init__(self):
        from deertracker.model import Detector

        self.model = Detector()

    def predict(self, request, context):
        """predict"""
        try:
            bbox, label, score = self.model.predict(
                request.value, lat=request.lat, lon=request.lon
            )
            context.set_code(grpc.StatusCode.OK)
            return deertracker_dot_grpc_dot_detector__pb2.Prediction(
                bbox=[
                    deertracker_dot_grpc_dot_detector__pb2.Box(
                        x=b[0], y=b[1], w=b[2], h=b[3]
                    )
                    for b in bbox
                ],
                label=label,
                score=score,
            )
        except Exception as e:
            LOGGER.exception(e)
            context.set_code(grpc.StatusCode.INTERNAL)
            raise e


def add_DetectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "predict": grpc.unary_unary_rpc_method_handler(
            servicer.predict,
            request_deserializer=deertracker_dot_grpc_dot_detector__pb2.Image.FromString,
            response_serializer=deertracker_dot_grpc_dot_detector__pb2.Prediction.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Detector", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Detector(object):
    """Detector service takes image bytes and returns prediction of classes of objects detected"""

    @staticmethod
    def predict(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Detector/predict",
            deertracker_dot_grpc_dot_detector__pb2.Image.SerializeToString,
            deertracker_dot_grpc_dot_detector__pb2.Prediction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
